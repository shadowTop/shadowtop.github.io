<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>影子的博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 影子的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 30 Apr 2020 17:40:31 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JS语法</title>
      <link>http://localhost:1313/post/js%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 30 Apr 2020 17:40:31 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js%E8%AF%AD%E6%B3%95/</guid>
      
        <description>

&lt;h2 id=&#34;es6&#34;&gt;ES6&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;什么是表达式和语句？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;表达式一般都有值，语句可能有也可能没有&lt;br /&gt;
   语句一般会改变环境（声明、赋值）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;表达式
 1+2 表达式的值为 3&lt;br /&gt;
  add（1，2）表达式的值为函数的返回值&lt;br /&gt;
  console.log(3)的值是 undefined&lt;br /&gt;
  console.log 表达式的值为函数本身&lt;/li&gt;
&lt;li&gt;语句
 var a = 1 是一个语句 （undefined）&lt;/li&gt;
&lt;li&gt;大小写敏感&lt;/li&gt;
&lt;li&gt;如果不影响断句，空格没有实际意义&lt;/li&gt;
&lt;li&gt;return 后面不能加回车&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;标识符规则

&lt;ul&gt;
&lt;li&gt;第一个字符，可以是 Unicode 字母或\$或_或中文&lt;/li&gt;
&lt;li&gt;后面的字符可以上上面的， 还可以有数字 数字不能放在第一位&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;注释

&lt;ul&gt;
&lt;li&gt;好的注释 踩坑注解 | 为什么代码会写的这么奇怪，遇到什么 bug&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;区块 block

&lt;ul&gt;
&lt;li&gt;把代码块包在一起&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;条件语句&#34;&gt;条件语句&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;if else 语句&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if{表达式}{语句 2}else{语句 2}&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;{}&lt;/code&gt;在语句只有一句的时候可以省略，不建议&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a= 1
if(a===2)
console.log(&#39;a&#39;)
console.log(&#39;a等于2&#39;) // a等于2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最推荐使用的写法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    if(表达式){
        语句
    }else if(表达式){
        语句
    }else{
        语句
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;次推荐写法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 function fn (){
     if(表达式){
         return 表达式
     }
     if(表达式){
         return 表达式
     }
     return 表达式
 }

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;switch 语句&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;大部分时候不能省略 break&lt;/li&gt;

&lt;li&gt;&lt;p&gt;少部分时候，可以利用 break&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swith(fruit){
    case &amp;quot;banana&amp;quot;:
    // ...
    break;
    case &amp;quot;apple&amp;quot;:
    // ...
    break;
    default:
    // ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;问好冒号表达式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;表达式 1? 表达式 2：表达式 3&lt;/li&gt;
&lt;li&gt;用来替代简短的 if else&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;amp;&amp;amp; 短路逻辑&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;常用方法：f1 &amp;amp;&amp;amp; f1()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;||短路逻辑&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;常用方法：A= A||B&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;while-for-循环语句&#34;&gt;while、 for 循环语句&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;while 语法

&lt;ul&gt;
&lt;li&gt;while(表达式){语句}&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;浮点数不精确考点,下面的函数会是一个死循环 永远不能等于 1&lt;br /&gt;
while 中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a= 0.1 //初始化
while(a!== 1){ //判断
   a =a+0.1; //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;for 循环&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;语法 for (语句 1;表达式 2;语句 3){&lt;br /&gt;
循环体&lt;br /&gt;
}&lt;/li&gt;
&lt;li&gt;先执行语句 1 然后判断表达式 2 如果为真，执行循环体，然后执行语句 3&lt;/li&gt;
&lt;li&gt;如果为假，直接退出循环，执行后面的语句&lt;/li&gt;

&lt;li&gt;&lt;p&gt;刚才老师举了一个例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(let i=0 ;i&amp;lt;5; i++){
//过一段时间执行
setTimeout(()=&amp;gt;{
   console.log(i)
},0)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;刚刚运行了上面的代码，发现打印出来的还是 0 1 2 3 4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;但是如果将 let 换成 var 会发现 打印了 5 个 5&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;过一段时间，也就是在 for 循环之后执行&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将每次循环到循环语句 滞后输出&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;而这样带来的结果就是 输出 i 的时候这个 i 已经变成 5 了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;提出一个问题 let 和 var 的关系 ？？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;老师接下来就就讲到了这个问题 ，let 的单独处理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;break 和 continue 的区别？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;break 会推出所有循环 (退出最近的循环)V.S 退出当前一次循环&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 1;
function fn(){
console.log(a)
}
setTimeout(fn)
a=5 //5
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;label 语句&lt;br /&gt;
语法&lt;br /&gt;
foo:{&lt;br /&gt;
console.log(1);&lt;br /&gt;
break foo;&lt;br /&gt;
console.log(&amp;lsquo;本行不会输出&amp;rsquo;)&lt;br /&gt;
}&lt;br /&gt;
console.log(2);&lt;br /&gt;
{&lt;br /&gt;
a:1&lt;br /&gt;
}&lt;br /&gt;
上面的东西就是 label 但是 chrome 会认为这是一个对象 但是如果在 a:1 之后加上&amp;rdquo;;&amp;rdquo; chrome 就会返回 1&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Canvas实践 画图板</title>
      <link>http://localhost:1313/post/canvas%E5%AE%9E%E8%B7%B5-%E7%94%BB%E5%9B%BE%E6%9D%BF/</link>
      <pubDate>Wed, 29 Apr 2020 17:24:54 +0800</pubDate>
      
      <guid>http://localhost:1313/post/canvas%E5%AE%9E%E8%B7%B5-%E7%94%BB%E5%9B%BE%E6%9D%BF/</guid>
      
        <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;上午解决的问题
项目初始话，一开始使用 dom 操作&lt;br /&gt;
实现的功能就是鼠标滑过，在当前像素位置生成一个‘点’&lt;br /&gt;
也就是添加&lt;code&gt;div&lt;/code&gt;&lt;br /&gt;
主要使用到的方法就是&lt;code&gt;canvas.onmousemove = (e) =&amp;gt; {}&lt;/code&gt;&lt;br /&gt;
然后就是用 &lt;code&gt;let div&lt;/code&gt;&lt;br /&gt;
为这个 div 添加属性&lt;br /&gt;
使其出现在鼠标的位置&lt;br /&gt;
就像画点一样&lt;br /&gt;
还有一个重要的操作就是将这个生产的‘点’&lt;br /&gt;
使用&lt;code&gt;canvas.appendChild(div)&lt;/code&gt;将其添加到给定的 canvas 中&lt;br /&gt;
还有 一个重要的东西&lt;br /&gt;
应该算是采坑&lt;br /&gt;
那就是让你的 canvas 的大小和你当前的可操作性区域一样大。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; canvas.width = document.documentElement.clientWidth;
 canvas.height = document.documentElement.clientHeight;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 canvas 来实现之前的功能（更少的性能，更加丝滑）&lt;br /&gt;
这期间需要查询 mdn 文档&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    var canvas = document.getElementById(&amp;quot;canvas&amp;quot;);
    var ctx = canvas.getContext(&amp;quot;2d&amp;quot;);
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以开心的使用 canvas 来画图了&lt;br /&gt;
同样还是使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
    canvas.onmousemove = (e) =&amp;gt; {
            ctx.fillStyle = &amp;quot;red&amp;quot;;
            ctx.fillRect(e.clientX, e.clientY, 10, 10);
    }
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码的意思大致就是，画一个红色的 10px 像素的点，在我鼠标移动过的地方。
这样和之前的功能就差不多了
现在解决一个问题
那就是 我鼠标一进去就开始绘制
那么我希望可以只在为鼠标按下的时候才绘制
那么这就用到了两个条件 鼠标按下且移动
那就在上面函数的基础上也就是鼠标移动的基础上
判断鼠标是否按下
先去 let 一个变量 当鼠标按下将其值设定为 ture
鼠标释放将其值设置为 false
。。。
解释一下上面的参数 e
当我在调取浏览器时间 onmousemove 时间 2 时，e 是事件相关信息
而我使用相关信息中的 e.clientX&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;完善这个 canvas（解决断点问题）
这一部分花了很多时间&lt;br /&gt;
大概两个多小时 还是在有人采坑的基础上&lt;br /&gt;
目前我还是不能具有将代码独立完成的能力&lt;br /&gt;
先解决断点问题&lt;br /&gt;
移动过快可能会断开&lt;br /&gt;
那么我们需要让 js 把这种中间填补上来&lt;br /&gt;
就需要使用 canvas 中的划线工具&lt;br /&gt;
具体代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    function draw() {
    var canvas = document.getElementById(&#39;canvas&#39;);
    if (canvas.getContext) {
        var ctx = canvas.getContext(&#39;2d&#39;);

        ctx.beginPath();
        ctx.moveTo(75, 50);
        ctx.lineTo(100, 75);
        ctx.lineTo(100, 25);
        ctx.fill();
    }
    }

    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么我们如何去使用它呢&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    function drawLine(x1, y1, x2, y2) {
        ctx.beginPath();
        //之前这个属性写在外面没有效果
        //我猜可能是要写在beginPath之后
        ctx.lineWidth = 5;
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.lineCap = &amp;quot;round&amp;quot;;
        //这一句非常有必要，让你在线的拐角处更加圆润   也是一个坑
        ctx.stroke();
    }
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里面其实还有很多坑去踩&lt;br /&gt;
但是我现在比较懒&lt;br /&gt;
想直接去使用&lt;br /&gt;
&lt;code&gt;ctx.lineWidth = 5;&lt;/code&gt; 这一句规定线宽度&lt;br /&gt;
之前我写在函数外不生效&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;画线工具已经准备好了&lt;br /&gt;
现在要处理的就是解决上一个点和下一个点实时更新问题&lt;br /&gt;
这里需要借助浏览器事件解决&lt;br /&gt;
当 onmousedown 的时候 将这个点提取出来&lt;br /&gt;
&lt;code&gt;last = [e.clientX, e.clientY];&lt;/code&gt;
保存在变量中&lt;br /&gt;
接下来就是在 onmousemove 事件中调用之前准备好的画线工具&lt;br /&gt;
&lt;code&gt;drawLine(last[0], last[1], e.clientX, e.clientY);&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;last = [e.clientX, e.clientY];&lt;/code&gt;
这样大致就完成了一个比较好的 pc 端的效果&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;接下来就是解决手机端的问题&lt;br /&gt;
 感觉很简单啊 只需要炒之前的代码&lt;br /&gt;
 但是抄完以后发现有 bug&lt;br /&gt;
 那是因为 手机里面没有 onmousedown 事件&lt;br /&gt;
 那现在就需要选择手机里面对应的事件&lt;br /&gt;
 ontouchstart
&lt;code&gt;canvas.ontouchstart = (e) =&amp;gt; { let x = e.touches[0].clientX; let y = e.touches[0].clientY; last = [x, y]; };&lt;/code&gt;
&lt;code&gt;canvas.ontouchmove = (e) =&amp;gt; { //在手机上支持多点触控，这时候触摸可能就是一个属性，所以我们需要获取第一个的值 let x = e.touches[0].clientX; let y = e.touches[0].clientY; drawLine(last[0], last[1], x, y); last = [x, y]; };&lt;/code&gt;
以上就完成了这个功能&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对了这个应该放到最前面&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;本地预览
需要先全局安装 HTTP-server&lt;br /&gt;
安装操作
&lt;code&gt;yarn -g http-serve&lt;/code&gt;&lt;br /&gt;
启动操作&lt;br /&gt;
&lt;code&gt;hs . -c-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;部署到 GitHub Pages&lt;br /&gt;
新建 git 仓库
将代码提交到仓库&lt;br /&gt;
在仓库 settings 选项中找到 GitHub Pages 选项&lt;br /&gt;
选择分支 就会生成站点 再加上自己的路径 就可以时刻访问了&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>内存图与JS世界</title>
      <link>http://localhost:1313/post/%E5%86%85%E5%AD%98%E5%9B%BE%E4%B8%8Ejs%E4%B8%96%E7%95%8C/</link>
      <pubDate>Tue, 28 Apr 2020 16:49:39 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%86%85%E5%AD%98%E5%9B%BE%E4%B8%8Ejs%E4%B8%96%E7%95%8C/</guid>
      
        <description>

&lt;h3 id=&#34;操作系统常识&#34;&gt;操作系统常识&lt;/h3&gt;

&lt;h4 id=&#34;打开浏览器&#34;&gt;打开浏览器&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;双击 Chrome 图标，就会运行 chrome.exe 文件&lt;/li&gt;
&lt;li&gt;开启 Chrome 进程，作为主进程&lt;/li&gt;
&lt;li&gt;主进程会开启一些辅助进程&lt;/li&gt;
&lt;li&gt;每新建一个网页，就有可能会开启一个子进程&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;浏览器的功能&#34;&gt;浏览器的功能&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;发起请求，下载 HTML，解析 HTML，下载 CSS，解析 CSS，下载 CSS，渲染界面，下载 JS，解析 JS，执行 JS 等&lt;/li&gt;
&lt;li&gt;功能模块：用户界面、渲染引擎、JS 引擎、存储等&lt;/li&gt;
&lt;li&gt;上面功能模块一般各处于不同的线程（比进程更小）&lt;/li&gt;
&lt;li&gt;如果进程是车间，那么线程就是车间里的流水线&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;js-引擎&#34;&gt;JS 引擎&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;V8 引擎，C++编写 。Node.js 用的就是 V8 引擎&lt;/li&gt;
&lt;li&gt;主要功能

&lt;ul&gt;
&lt;li&gt;编译：把 JS 代码翻译为机器能执行的字节码或机器码&lt;/li&gt;
&lt;li&gt;优化：改写代码，使其更高效&lt;/li&gt;
&lt;li&gt;执行：执行上面的字节码或者机器码&lt;/li&gt;
&lt;li&gt;垃圾回收：把 JS 用完的内存回收，方便之后再次使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;执行-js-代码&#34;&gt;执行 JS 代码&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;准备工作

&lt;ul&gt;
&lt;li&gt;提供 API：window、document、setTimeout&lt;/li&gt;
&lt;li&gt;以上功能称为运行环境 runtime env&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;内存

&lt;ul&gt;
&lt;li&gt;这个部分重点 从瓜分系统来说
整个内存条 OS 占一部分，然后开了一个 chrome 占了一部分（包括辅助进程），再去开一个 tab 页面用到的内容包括渲染进程、用户界面界面、JS 引擎。
JS 引擎会用到代码区，所用到的变量，数据对象的一个存储逻辑。
变量统一放在一个区域，然后变量对应的值会对应在 Stack 区，64 位的存储方式，如果是对象则在 Stack 区生成一个类似索引的东西，对应到 Heap 的一个随机分配的区域，这个区域里存储了这些数据。
那么如果将这个对象赋值给另一个变量会出现什么呢，也就是同样在 Stack（栈）区给一个同样的索引，连接到 Heap 的区域，如果将这个新的变量中的某个属性赋值，则会改变 Heap 这个区域的值，那么之前的变量的值也会对应的改变&lt;/li&gt;
&lt;li&gt;规律 数据分为两种：非对象和对象&lt;/li&gt;
&lt;li&gt;非对象都存在 Stack&lt;/li&gt;
&lt;li&gt;对象都存在 Heap&lt;/li&gt;
&lt;li&gt;=号总是会把右边的东西赋值到左边（不存在传值和传址）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;栈（Stack）和堆（Heap）
Stack 区特点：每个数据顺序存放
Heap 区：每个数据随机存放&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对象篡改实例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var person = {name:&#39;ning&#39;}
var person2 = person
person2.name = &#39;rrr&#39;
conlose.log(person.name) // &#39;rrr&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;window
window 由浏览器提供&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;console ,document,对象（Object），数组（array），函数(Function)都挂在 window 上&lt;/li&gt;
&lt;li&gt;因为方便，挂在 window 上的东西可以在任何地方直接用&lt;/li&gt;
&lt;li&gt;window 本身也就像是一个变量对应着栈区的一个&amp;rsquo;索引&amp;rsquo;，这个&amp;rsquo;索引&amp;rsquo;对应到 Heap 中，就是 window 的各个属性（console、Object 等）而这些属性所对应的值也在 Heap 中&lt;/li&gt;
&lt;li&gt;细节
window 变量和 window 对象是两个东西
window 变量是一个容量，存放 window 对象的地址
window 对象是 Heap 里的一坨数据
&lt;code&gt;var x = window&lt;/code&gt;
便可以用 x 代替 window，像 JQuery 中\$
同样 console 和 console 对象也不是同一个东西，一个是内存地址，一个是数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;原型链&#34;&gt;原型链&lt;/h4&gt;

&lt;p&gt;JS 的三座大山（this、原型、AJAX）之一&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;梳理一下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prototype 是什么东西&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.dir(window).Object.prototype&lt;/code&gt; 打印出来看起来像是一些无用的函数&lt;/li&gt;
&lt;li&gt;思考一下为什么声明一个对象变量，为何就可以直接调用对象中的属性（例如 toString（））&lt;/li&gt;
&lt;li&gt;xxx.prototype 存储了 xxx 对象的共有属性，这就叫原型&lt;/li&gt;
&lt;li&gt;原型让你无需重复声明共有属性，省代码生内存&lt;/li&gt;
&lt;li&gt;每个对象都有一个隐藏属性，指向原型&lt;/li&gt;
&lt;li&gt;但是声明的变量的隐藏属性是 _ &lt;em&gt;proto&lt;/em&gt; _&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以上的说明仍旧没有回答 prototype 是什么东西&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;贴一段我老师的话
你的 JS 代码还没运行的时候，JS 环境里已经有一个 window 对象了 window 对象有一个 Object 属性，&lt;br/&gt;
window.Object 是一个函数对象 window.Object 这个函数对象有一个重要属性是 prototype，干什么用的等会说
window.Object.prototype 里面有这么几个属性 toString（函数）、valueOf（函数）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var obj = {}
obj.toString()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上代码大概是让 obj 变量指向一个空对象，这个空对象有个 &lt;strong&gt;proto&lt;/strong&gt; 属性指向 window.Object.prototype。&lt;br/&gt;
   这样你在调用 obj.toString() 的时候，obj 本身没有 toString，就去 obj.&lt;strong&gt;proro&lt;/strong&gt; 上面去找 toString。&lt;br/&gt;
   所以你调用 obj.toString 的时候，实际上调用的是 window.Object.prototype.toString &lt;br/&gt;
   那么 window.Object.prototype.toString 是怎么获取 obj 的内容的呢？&lt;br/&gt;
   那是因为 obj.toString() 等价于 obj.toString.call(obj) 同时 obj.toString.call(obj) 等价于 window.Object.prototype.toString.call(obj)这句话把 obj 传给 toString 了。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文章
&lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html&#34;&gt;进程与线程的一个简单解释&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#1_1&#34;&gt;浏览器的工作原理&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://www.zhihu.com/question/56770432/answer/315342130&#34;&gt;JS 中*proto*和 prototype 存在的意义&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e&#34;&gt;How JavaScript works:inside the V8 engine&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>JavaScript的前世今生</title>
      <link>http://localhost:1313/post/javascript%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link>
      <pubDate>Tue, 28 Apr 2020 16:16:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/javascript%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid>
      
        <description>

&lt;h3 id=&#34;javascript-概述&#34;&gt;JavaScript 概述&lt;/h3&gt;

&lt;h4 id=&#34;javascript-历史&#34;&gt;JavaScript 历史&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;布兰登发明了 JS 诞生

&lt;ul&gt;
&lt;li&gt;布莱登临危受命 （公司要求给浏览器添加一个脚本功能、公司要求这个脚本必须蹭 Java 的流量、布莱登花了十天设计了 JS 的最初版本）&lt;/li&gt;
&lt;li&gt;命名 Mocha=&amp;gt;LiveScript=&amp;gt;JavaScript&lt;/li&gt;
&lt;li&gt;浏览器一开始同时就支持 Java 和 JavaScript&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;1996 年 11 月，网景向 ECMA 提交语言标准，由于版权问题，JS 语言标准不叫 JavaScript,叫 ECMAScript。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JS 与 ECMAScript 的关系&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ECMAScript 是纸上的标准，JS 是浏览器的实现&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JavaScript 兴起&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gmail 的出现（2004）&lt;/li&gt;
&lt;li&gt;2005 年，Jesse 将谷歌用到的技术命名为 AJAX（前端技术正式出现）&lt;/li&gt;
&lt;li&gt;2006 年，JQuery 发布&lt;/li&gt;
&lt;li&gt;10 年左右中国才有了前端&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JavaScript 爆发&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;V8 快如闪电、09 年，Ryan 基于 V8 创建了 Node.js。&lt;/li&gt;
&lt;li&gt;10 年，Isaac 基于 Node.js 写出了 npm&lt;/li&gt;
&lt;li&gt;同年，TJ 受 Sina 突然启发，发布了 Express.js&lt;/li&gt;
&lt;li&gt;期间出来的技术太多（gulp、grunt、yeoman、requirejs、webpack、Angular、React、Vue）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;js-的-10-个设计缺陷&#34;&gt;JS 的 10 个设计缺陷&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;不适合开发大型程序 （没有 namespace，很难模块化；没有将代码分布在多个文件的规定；循序同名函数的重复定义，后面的定义可以覆盖前面的定义，很不利与模块化加载）&lt;/li&gt;
&lt;li&gt;非常小的标准库&lt;/li&gt;
&lt;li&gt;null（属于对象（object）的一种，意思是该对象为空）和 undefined （一种数据类型，表示未定义），在编程实践中 null，几乎没用&lt;/li&gt;
&lt;li&gt;全局变量难以控制（JavaScript 的全局变量，在所有模块中都是课可见的；任何一个函数内部都可以生成全局变量。）&lt;/li&gt;
&lt;li&gt;自动插入行尾分号&lt;/li&gt;

&lt;li&gt;&lt;p&gt;加号运算器（可以表示数字与数字的和，也可以表示字符与字符的连接）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alert(1+&amp;quot;10&amp;quot;); // 110

　　alert(&amp;quot;10&amp;quot;+1); // 101
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;NaN 是一种数字，表示超出了解释器的极限，他有一些很奇怪的特性。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
NaN === NaN; //false

NaN !== NaN; //true

alert( 1 + NaN ); // NaN

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数组和对象的区分，由于 JavaScript 的数组也属于对象（Object），所以要区分一个对象到底是不是数组也，相当麻烦。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;== 和 === 推荐任何时候都使用“===”比较符&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;基本类型的包装对象
JavaScript 有三种基本的数据类型：字符串、数字和布尔值。与基本数据类型对应的对象类型，作用很小，造成的混淆却很大。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　　new Boolean(false);

　　new Number(1234);

　　new String(&amp;quot;Hello World&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>JavaScript初识</title>
      <link>http://localhost:1313/post/javascript%E5%88%9D%E8%AF%86/</link>
      <pubDate>Tue, 28 Apr 2020 15:08:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/javascript%E5%88%9D%E8%AF%86/</guid>
      
        <description>

&lt;h3 id=&#34;前期准备&#34;&gt;前期准备&lt;/h3&gt;

&lt;h4 id=&#34;软能力&#34;&gt;软能力&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;逻辑能力&lt;/li&gt;
&lt;li&gt;质疑自己的能力 double check&lt;/li&gt;
&lt;li&gt;抽象思维

&lt;ul&gt;
&lt;li&gt;定了一份报纸&lt;/li&gt;
&lt;li&gt;关注了明星微博&lt;/li&gt;
&lt;li&gt;用 JS 监听了一个按钮的点击事件&lt;/li&gt;
&lt;li&gt;这三件事情用于共同的模式：发布订阅模式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;硬能力&#34;&gt;硬能力&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;足够的代码量

&lt;ul&gt;
&lt;li&gt;如何统计自己的代码行数安装 &lt;code&gt;yarn global add cloc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;足够的概念

&lt;ul&gt;
&lt;li&gt;不仅要会写，还要会说&lt;/li&gt;
&lt;li&gt;常用常考 （闭包、原型、类、继承、MVC、Flux、高阶函数、前端工程化）&lt;/li&gt;
&lt;li&gt;如何积累（在课程中提炼、在大脑中思考、在博客上总结、在代码中实践）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有足够的采坑经验

&lt;ul&gt;
&lt;li&gt;做项目，而且是个人项目（所有的代码都是自己写的）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;javascript-概述&#34;&gt;JavaScript 概述&lt;/h3&gt;

&lt;h4 id=&#34;javascript-历史&#34;&gt;JavaScript 历史&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;布兰登发明了 JS 诞生

&lt;ul&gt;
&lt;li&gt;布莱登临危受命 （公司要求给浏览器添加一个脚本功能、公司要求这个脚本必须蹭 Java 的流量、布莱登花了十天设计了 JS 的最初版本）&lt;/li&gt;
&lt;li&gt;命名 Mocha=&amp;gt;LiveScript=&amp;gt;JavaScript&lt;/li&gt;
&lt;li&gt;浏览器一开始同时就支持 Java 和 JavaScript&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;1996 年 11 月，网景向 ECMA 提交语言标准，由于版权问题，JS 语言标准不叫 JavaScript,叫 ECMAScript。&lt;/li&gt;
&lt;li&gt;由于 IE（01-10），网景将浏览器开源（Firefox）&lt;/li&gt;
&lt;li&gt;谷歌 04 年雇佣了 Firefox 和 IE 的开发者，08 年发布，11 年超过 Firefox，16 年全区份额 62%&lt;/li&gt;
&lt;li&gt;移动市场兴起 16 年淘宝天猫不支持 IE6、7&lt;/li&gt;
&lt;li&gt;ECMAScript 标准的制定&lt;/li&gt;
&lt;li&gt;JS 与 ECMAScript 的关系&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;ECMAScript 是纸上的标准，JS 是浏览器的实现&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript 兴起

&lt;ul&gt;
&lt;li&gt;Gmail 的出现（2004）&lt;/li&gt;
&lt;li&gt;2005 年，Jesse 将谷歌用到的技术命名为 AJAX（前端技术正式出现）&lt;/li&gt;
&lt;li&gt;2006 年，JQuery 发布&lt;/li&gt;
&lt;li&gt;10 年左右中国才有了前端&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JavaScript 爆发

&lt;ul&gt;
&lt;li&gt;V8 快如闪电、09 年，Ryan 基于 V8 创建了 Node.js。&lt;/li&gt;
&lt;li&gt;10 年，Isaac 基于 Node.js 写出了 npm&lt;/li&gt;
&lt;li&gt;同年，TJ 受 Sina 突然启发，发布了 Express.js&lt;/li&gt;
&lt;li&gt;期间出来的技术太多（gulp、grunt、yeoman、requirejs、webpack、Angular、React、Vue）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;JS 是历史的选择&lt;/li&gt;
&lt;li&gt;低开高走&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>HTTP全解</title>
      <link>http://localhost:1313/post/http%E5%85%A8%E8%A7%A3/</link>
      <pubDate>Sat, 25 Apr 2020 19:58:57 +0800</pubDate>
      
      <guid>http://localhost:1313/post/http%E5%85%A8%E8%A7%A3/</guid>
      
        <description>

&lt;h2 id=&#34;请求与响应&#34;&gt;请求与响应&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;如何发送请求
帮你发送请求的工具叫做用户代理 User Agent&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;用 Chrome 地址栏&lt;/li&gt;
&lt;li&gt;用 curl 命令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后缀并不能表示文件是什么，而是为了告诉 windows 用什么软件去打开它。&lt;/p&gt;

&lt;h3 id=&#34;我们要做一个服务器程序&#34;&gt;我们要做一个服务器程序&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;node.js 有一个 http 模块可以做到&lt;/li&gt;
&lt;li&gt;注意事项&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;需要写的代码是服务器代码，一般放在服务器上&lt;/li&gt;
&lt;li&gt;path 是不带查询参数的路径 /x&lt;/li&gt;
&lt;li&gt;query 是查询餐参数的对象形式{a:&amp;lsquo;1&amp;rsquo;}&lt;/li&gt;
&lt;li&gt;queryString 是查询参数的字符串形式?a=1&lt;/li&gt;
&lt;li&gt;pathWithQuery 是带参数的路径，一般不用&lt;/li&gt;
&lt;li&gt;request 是请求对象&lt;/li&gt;
&lt;li&gt;response 是响应对象&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;代码逻辑&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;每次收到请求都会把中间的代码执行一遍&lt;/li&gt;
&lt;li&gt;用 if else 判断路径，并返回响应&lt;/li&gt;
&lt;li&gt;如果是一支路径，一律返回 200&lt;/li&gt;
&lt;li&gt;未知路径返回 404&lt;/li&gt;
&lt;li&gt;Content-Type 表示内容的【类型/语法】&lt;/li&gt;
&lt;li&gt;response.write()可以填写返回的内容&lt;/li&gt;
&lt;li&gt;response.end()表示响应可以发给用户了&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;请求和响应的写法&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;请求
请求动词 协议名、版本
host：域名或 IP
Accept:text/html
Content-Type:请求体格式
回车
请求体（也就是上传内容）&lt;/li&gt;
&lt;li&gt;响应
协议名/版本 状态码 状态字符串
Content-Type:响应体的格式
回车
响应体（也就是下载内容）
&lt;code&gt;这一部分其实不是很懂 ，只是了解了请求响应格式，状态码是要考察的问题&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;如何让 curl 来构造请求&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;设置请求动词
-X POST（注意大小写）&lt;/li&gt;
&lt;li&gt;设置路径和查询参数
直接在 url 后面加&lt;/li&gt;
&lt;li&gt;设置请求头
-H&amp;rsquo;Name:Value&amp;rsquo;或者&amp;ndash;header&amp;rsquo;Name:Value&amp;rsquo;&lt;/li&gt;
&lt;li&gt;设置请求体
-d&amp;rsquo;内容&amp;rsquo; 或者&amp;ndash;data&amp;rsquo;内容&amp;rsquo;
curl 就是个浏览器 可以下载图片&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用 Node.js 读取请求 设置响应&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;console.log 调试大法&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;购买阿里云服务器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;部署 Node.js 应用到云服务器&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个先放一下
这个主要是了解一下请求与响应&lt;/p&gt;

&lt;p&gt;本地版的我还没有搞定&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://localhost:1313/post/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Sat, 25 Apr 2020 17:13:37 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B5%85%E6%9E%90url/</guid>
      
        <description>

&lt;h2 id=&#34;url-包含那几部分-每部分分别有什么作用&#34;&gt;URL 包含那几部分，每部分分别有什么作用&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;URL 包含 协议+ 域名或 IP+端口号+路径+ 查询字符串+锚点
例子 &lt;a href=&#34;http://www.baidu.com/s?wd=hi&amp;amp;rsv_spt=1#5&#34;&gt;http://www.baidu.com/s?wd=hi&amp;amp;rsv_spt=1#5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作用

&lt;ul&gt;
&lt;li&gt;协议为 HTTP 协议和 HTTPS 协议，规定访问和返回格式，即服务器与浏览器之间信息规范的标准&lt;/li&gt;
&lt;li&gt;域名或 IP 接收信息和发送新的终端地址&lt;/li&gt;
&lt;li&gt;端口号区分服务器的服务类型 HTTPS 默认端口 443，HTTP 默认端口 80&lt;/li&gt;
&lt;li&gt;路径 确定访问文件的具体位置&lt;/li&gt;
&lt;li&gt;查询字符串 也相当于请求参数 例如 language=cn&lt;/li&gt;
&lt;li&gt;确定访问的页面位置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;dns-的作用是什么-nslookup-命令怎么用&#34;&gt;DNS 的作用是什么，nslookup 命令怎么用&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;DNS 的全程是 Domain Name System，主要作用是域名解析&lt;/li&gt;
&lt;li&gt;nslookup 命令

&lt;ul&gt;
&lt;li&gt;Nslooup(name server lookup)是一个用于查询 internet 域名信息或诊断 DNS 服务器问题的工具。&lt;/li&gt;
&lt;li&gt;在命令行敲入 nslookup baidu.com 就可以查询 baidu.com 域名信息&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ip-的作用是什么-ping-命令怎么用&#34;&gt;IP 的作用是什么，ping 命令怎么用&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;IP 是 Internet Protocol（网际互连协议）的缩写，是 TCP/IP 体系中的网络层协议。IP 分为内网和外网 IP。&lt;/li&gt;
&lt;li&gt;作用：设计 IP 的目的是提高网络的可扩展性：一是解决互联网问题，实现大规模、异构网络的互联互通；二是分割顶层网络应用和底层网络技术之间的耦合关系，以利于两者的独立发展。&lt;/li&gt;
&lt;li&gt;ping 命令 ping baidu.com&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;域名是什么-分别哪几类域名&#34;&gt;域名是什么，分别哪几类域名&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;域名可以说是一个 IP 地址的代称，目的是为了便于记忆后者。是互联网上某个计算机或组的一种身份标识，用于在传输数据时的电子方位标识，服务器主机就是用于服务于互联网的 PC 的计算机服务设备。&lt;/li&gt;
&lt;li&gt;域名分类

&lt;ul&gt;
&lt;li&gt;顶级域名（国家及地区双字代码顶级域（国家和地区顶级域）和通用顶级域如 .com | .edu | .org | .net）&lt;/li&gt;
&lt;li&gt;子域名（例如，在 zh.wikipedia.org 中，wikipedia 是二级域名。w3.org 中，w3 也是二级域名，与前例中的 wikipedia 属于一个层面。）&lt;/li&gt;
&lt;li&gt;国际化域名&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Http入门</title>
      <link>http://localhost:1313/post/http%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 25 Apr 2020 16:07:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/http%E5%85%A5%E9%97%A8/</guid>
      
        <description>

&lt;h2 id=&#34;网络和-ip&#34;&gt;网络和 IP&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;如何获取外网 IP

&lt;ul&gt;
&lt;li&gt;租用宽带，然后使用路由器广播出来无线 wifi&lt;/li&gt;
&lt;li&gt;连接这个 wifi 的设备都是同一个外网 IP&lt;/li&gt;
&lt;li&gt;重启路由器可能会被重新分配外网 IP&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;内网 IP

&lt;ul&gt;
&lt;li&gt;一般为 192.198.1.1&lt;/li&gt;
&lt;li&gt;几个重要 IP 127.0.0.1&lt;/li&gt;
&lt;li&gt;localhost 可以使用 hosts 指定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;路由器的功能
网关&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;端口&#34;&gt;端口&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;端口 一台服务器可以提供很多服务 一个端口提供一种服务

&lt;ul&gt;
&lt;li&gt;IP 和端口缺一不可&lt;/li&gt;
&lt;li&gt;HTTP 服务最好使用 80 端口&lt;/li&gt;
&lt;li&gt;HTTPS 服务使用的 443 端口&lt;/li&gt;
&lt;li&gt;FTP 使用 21 端口&lt;/li&gt;
&lt;li&gt;一共有 65535 个端口&lt;/li&gt;
&lt;li&gt;端口被占用，就只能换一个端口&lt;/li&gt;
&lt;li&gt;使用 http-server 默认使用 8080 端口&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;域名&#34;&gt;域名&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;域名

&lt;ul&gt;
&lt;li&gt;查询 IP ping baidu.com&lt;/li&gt;
&lt;li&gt;一个域名可以对应不同 IP&lt;/li&gt;
&lt;li&gt;这个叫做负载均衡，防止一套机器扛不住&lt;/li&gt;
&lt;li&gt;一个 IP 可以对应不同的域名&lt;/li&gt;
&lt;li&gt;这个叫共享主机，云虚机主机&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;域名和 IP 是怎么对应起来的

&lt;ul&gt;
&lt;li&gt;通过 DNS 域名系统&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;当我们输入网址 baidu.com

&lt;ul&gt;
&lt;li&gt;过程&lt;/li&gt;
&lt;li&gt;你的浏览器回向电信、连通提供的 Dns 服务器询问该网址对应什么 IP&lt;/li&gt;
&lt;li&gt;电信、联通会回答一个 IP&lt;/li&gt;
&lt;li&gt;然后浏览器回向对应的 IP 的 &lt;sup&gt;80&lt;/sup&gt;&amp;frasl;&lt;sub&gt;443&lt;/sub&gt; 端口发送请求&lt;/li&gt;
&lt;li&gt;请求内容是查看 baibu.com 的首页&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;www 的

&lt;ul&gt;
&lt;li&gt;www.baiudu.com 和 baidu.com 是两个域名&lt;/li&gt;
&lt;li&gt;com 是顶级域名&lt;/li&gt;
&lt;li&gt;www 是多余的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如何请求页面

&lt;ul&gt;
&lt;li&gt;路径不同就可以请求不同的页面&lt;/li&gt;
&lt;li&gt;同一个页面，不同内容 www.baidu.com/s?wd=hi&lt;/li&gt;
&lt;li&gt;同一个页面，不同位置 #（锚点）&lt;/li&gt;
&lt;li&gt;锚点是无法在 Network 面板看到了&lt;/li&gt;
&lt;li&gt;因为锚点无法传输给服务器&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HTTP 协议
基于 TCP 和 IP 两个协议

&lt;ul&gt;
&lt;li&gt;curl 命令&lt;/li&gt;
&lt;li&gt;curl -v &lt;a href=&#34;https://www.baidu.com&#34;&gt;https://www.baidu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP 协议就是规定如何访问和返回格式的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Css知识总结</title>
      <link>http://localhost:1313/post/css/</link>
      <pubDate>Tue, 21 Apr 2020 08:01:34 +0800</pubDate>
      
      <guid>http://localhost:1313/post/css/</guid>
      
        <description>

&lt;h2 id=&#34;浏览器渲染原理&#34;&gt;浏览器渲染原理&lt;/h2&gt;

&lt;p&gt;要了解浏览器渲染页面的过程，首先得知道一个名词 &amp;ndash; 关键路径渲染。关键渲染路径是指与当前用户操作有关的内容。例如用户在浏览器中打开一个页面，其中页面所显示的东西就是当前用户操作相关的内容，也就是浏览器从服务器那收到的 HTML、CSS、JavaScript 等相关的资源，然后经过一系列处理后渲染出来的 web 页面。
浏览器渲染的过程主要包括以下六步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;根据 HTML 构建 HTML 树（DOM）&lt;/li&gt;
&lt;li&gt;根据 CSS 构建 CSS 树（CSSOM）&lt;/li&gt;
&lt;li&gt;将两棵树合并成为一颗渲染树（render tree ）&lt;/li&gt;
&lt;li&gt;Layout 布局 (文档流、盒模型、计算大小和位置)&lt;/li&gt;
&lt;li&gt;Paint 绘制（把边框颜色、文字颜色、阴影等画出来）&lt;/li&gt;
&lt;li&gt;Compose (根据层叠关系展示画面)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;css-动画的两种做法-transition-和-animation&#34;&gt;CSS 动画的两种做法（transition 和 animation）&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;CSS transform 属性允许你旋转，缩放，倾斜或平移给定元素。这是通过修改 CSS 视觉格式化模型的坐标空间来实现的。有四个常用的功能&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;位移 translate 使用示例 &lt;code&gt;transform: translate(120px, 50%);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;缩放 scale 使用示例&lt;code&gt;transform: scale(2, 0.5);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;旋转 rotate 使用示例&lt;code&gt;transform: rotate(0.5turn); transform: rotate(45deg)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;倾斜 skew 使用示例&lt;code&gt;transform: skew(30deg, 20deg);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组合使用示例 &lt;code&gt;transform: rotate(45deg) translateY(31px);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;transition CSS 属性是 transition-property，transition-duration，transition-timing-function 和 transition-delay 的一个简写属性。

&lt;ul&gt;
&lt;li&gt;语法 transition：属性名 时长 过渡时间 延迟 表示所有属性 过渡方式包括 linear 、ease、ease-in、ease-out。&lt;/li&gt;
&lt;li&gt;代码示例 &lt;code&gt;transition: all 1s ease-out;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;并不是所有的属性都能过渡 display：none=&amp;gt;不能过渡&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;过渡必须要有起始 比如 hover 和非 hover 状态的过渡&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;让过渡具有中间点
使用两次 transform，用 setTimeout 或者监听 transitionend 事件&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如何让动画停在最后一帧
示例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#demo.start{
animation: xxx 1.5s forwards;
}


@keyframes xxx {
0% {
transform: none;
}
66.66%{
transform: translateX(200px);
}
100%{
transform: translateX(200px) translateY(100px);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上面代码用到了 keyframes 语法@keyframes 规则通过在动画序列中定义关键帧（或 waypoints）的样式来控制 CSS 动画序列中的中间步骤。这比转换更能控制动画序列的中间步骤。
示例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@keyframes identifier {
0% { top: 0; left: 0; }
30% { top: 50px; }
68%, 72% { left: 50px; }
100% { top: 100px; left: 100%; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;CSS animation 属性是 animation-name，animation-duration, animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode 和 animation-play-state 属性的一个简写属性形式。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;缩写语法 animation:时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名&lt;/li&gt;
&lt;li&gt;过渡方式：跟 transition 取值一样&lt;/li&gt;
&lt;li&gt;次数 ：具体次数或者 infinite&lt;/li&gt;
&lt;li&gt;方向：reverse|alternate|alternate-reverse&lt;/li&gt;
&lt;li&gt;填充模式：none|forwards|backwards|both&lt;/li&gt;

&lt;li&gt;&lt;p&gt;是否暂停：paused|running
&lt;code&gt;animation: .5s heart infinite alternate-reverse;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@keyframes heart {
0%{
transform: scale(1);
}
100%{
transform: scale(1.2);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://localhost:1313/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Mon, 13 Apr 2020 08:49:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      
        <description>

&lt;h1 id=&#34;a标签&#34;&gt;a标签&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;跳转到外部页面，跳转到内部锚点，跳转到邮箱或者电话&lt;/p&gt;

&lt;h2 id=&#34;a标签的属性&#34;&gt;a标签的属性&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;href 取值用法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;网址  例如&lt;a href=&#34;https://google.com&#34;&gt;https://google.com&lt;/a&gt;  &lt;a href=&#34;http://google.com&#34;&gt;http://google.com&lt;/a&gt;  //google.com&lt;/li&gt;
&lt;li&gt;路径  /a/b/c  或a/b/c  index.html或 ./index.html&lt;/li&gt;
&lt;li&gt;伪协议   javascript:代码; 直接执行其中的代码，为空时不响应&lt;/li&gt;
&lt;li&gt;mailto:邮箱&lt;/li&gt;
&lt;li&gt;tel：手机号&lt;/li&gt;
&lt;li&gt;id href = #xxx  写入的为当前页面的标签id可以用来作为目录&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;target的取值&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;内置名字  _blank在新建页打开  _top在最外层窗口打开，在使用了多个iframe之后   _parent在父窗口打开  _ self在当前窗口打开&lt;/li&gt;
&lt;li&gt;程序员命名  window的name  在target的属性中写 窗口名xxx 如果没有此窗口 新建一个窗口命名为xxx iframe 也可&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;download&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不是打开页面是下载页面 ，很多浏览器不支持&lt;/p&gt;

&lt;h1 id=&#34;img-标签&#34;&gt;img 标签&lt;/h1&gt;

&lt;p&gt;发出get请求，展示一张图片&lt;/p&gt;

&lt;h2 id=&#34;img标签属性&#34;&gt;img标签属性&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;alt 中写入提示信息，在加载失败后用作告知用户部分内容&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;height 和width 对于图片写高或者宽，另一个值自适应&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;src 图片地址&lt;/p&gt;

&lt;h2 id=&#34;img标签事件&#34;&gt;img标签事件&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;onload事件和onerror事件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用法 可以在js中对于加载失败的图片进行替换或者其他备份地址&lt;/p&gt;

&lt;h2 id=&#34;响应式&#34;&gt;响应式&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在img的css中写  max-width:100%;&lt;/p&gt;

&lt;h2 id=&#34;可替换元素&#34;&gt;可替换元素&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可替换元素的展现效果不是由css来控制的，这些元素是一种外部对象，他们外观的渲染是独立与css的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;css可以影响可替换元素的位置，但不会影响到可替换元素自身的内容。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;典型的可替换元素有 ifranme video embed  img&lt;/p&gt;

&lt;h1 id=&#34;table-标签&#34;&gt;table 标签&lt;/h1&gt;

&lt;h2 id=&#34;示例代码&#34;&gt;示例代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;
&amp;lt;tr&amp;gt;
  &amp;lt;th&amp;gt;Header content 1&amp;lt;/th&amp;gt;
  &amp;lt;th&amp;gt;Header content 2&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/thead&amp;gt;
&amp;lt;tfoot&amp;gt;
&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;Footer content 1&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Footer content 2&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tfoot&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;Body content 1&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Body content 2&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;table-相关的样式&#34;&gt;table 相关的样式&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;table-layout

&lt;ul&gt;
&lt;li&gt;auto
大多数浏览器采用自动表格布局算法对表格布局。表格及单元格的宽度取决于其包含的内容。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;fixed
表格和列的宽度通过表格的宽度来设置，某一列的宽度仅由该列首行的单元格决定。在当前列中，该单元格所在行之后的行并不会影响整个列宽。&lt;/li&gt;
&lt;li&gt;border-collapse

&lt;ul&gt;
&lt;li&gt;border-collapse CSS 属性是用来决定表格的边框是分开的还是合并的。在分隔模式下，相邻的单元格都拥有独立的边框。在合并模式下，相邻单元格共享边框。&lt;/li&gt;
&lt;li&gt;collapse
相邻的单元格共用同一条边框（采用 collapsed-border 表格渲染模型）。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;separate
默认值。每个单元格拥有独立的边框（采用 separated-border 表格渲染模型）。&lt;/li&gt;
&lt;li&gt;bordere-spacing&lt;/li&gt;
&lt;li&gt;该属性只适用于 border-collapse 值是 separate 的时候。border-spacing 属性指定相邻单元格边框之间的距离（只适用于 边框分离模式 ）。&lt;/li&gt;
&lt;li&gt;示例 &lt;code&gt;table { border-spacing: 10px 5px; }&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;from标签&#34;&gt;from标签&lt;/h1&gt;

&lt;p&gt;发get或post请求，然后刷新页面
 ## 属性
 1. action
    一个处理此表单信息的程序所在的URL。
 2. autocomplete
    用于指示 input 元素是否能够拥有一个默认值，此默认值是由浏览器自动补全的。此设定可以被属于此表单的子元素的 autocomplete 属性覆盖。 可能的值有：
    - off：在每一个用到的输入域里，用户必须显式的输入一个
    值，或者document 以它自己的方式提供自动补全；浏览器不会自动补全输入。
    - on：浏览器能够根据用户之前在表单里输入的值自动补全。
3. method
    浏览器使用这种 HTTP 方式来提交 表单. 可能的值有：
    - post：指的是 HTTP POST 方法；表单数据会包含在表单体内然后发送给服务器.
    - get：指的是 HTTP GET 方法；表单数据会附加在 action 属性的URI中，并以 &amp;lsquo;?&amp;rsquo; 作为分隔符，然后这样得到的 URI 再发送给服务器。如果这样做（数据暴露在 URI 中）没什么副作用，或者表单仅包含ASCII字符时，再考虑使用这种方法吧。
4. target
   - _self：在当前 HTML 4 或 HTML5 文档页面重新加载返回值。是默认值。译注：也就是说，如果此文档在一个frame中的话，self是在当前frame（document）中重新加载的，而不是整个页面（window）。
   - _blank：以新的 HTML 4 或 HTML5 文档窗口加载返回值。
   - _parent：在父级的 frame 中以 HTML 4 或 HTML 5 文档形式加载返回值，如果没有父级的frame，行为和_self一致。
   - _top：如果是 HTML 4 文档：清空当前文档，加载返回内容；HTML5：在当前文档的最高级内加载返回值，如果没有父级，和_self的行为一致。&lt;/p&gt;

&lt;h1 id=&#34;input标签&#34;&gt;input标签&lt;/h1&gt;

&lt;p&gt;作用 让用户输入内容&lt;/p&gt;

&lt;h2 id=&#34;input-属性&#34;&gt;input 属性&lt;/h2&gt;

&lt;p&gt;1.type: button/checkbox/email/file/hidden(完成系统填写提交)/number/password/radio/search/submit/tel/text
- &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input&#34;&gt;全部属性详解&lt;/a&gt;
2. 其他 name/autofocus/checked/disabled/maxlength/pattern/value/placeholder
3. 事件 onchange/onfocus.onblur
4. 验证器&lt;/p&gt;

&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;一般不监听input的click事件&lt;/li&gt;
&lt;li&gt;form里面的input要有name&lt;/li&gt;
&lt;li&gt;form里面要放一个type=submit才能出发submit事件&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML 入门笔记</title>
      <link>http://localhost:1313/post/html/</link>
      <pubDate>Fri, 10 Apr 2020 13:11:41 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html/</guid>
      
        <description>&lt;ol&gt;
&lt;li&gt;HTML 的历史及简介

&lt;ul&gt;
&lt;li&gt;HTML 是超文本标记语言，用于描述、定义网站内容。
HTML 在 1990 左右诞生，发明人是 Tim Berners-Lee(李爵士)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如何书写 HTML - 起手式

&lt;ul&gt;
&lt;li&gt;在使用 VScode 进行编写 html 文件时，先写一个!再敲 tab 键，编辑器可以自动生成 html 的基本框架 - 这些标签中分别规定了文档类型、语言、标题以及设备兼容&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HTML 中常用来表示章节的标签

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;h1&amp;gt;–&amp;lt;h6&amp;gt;&lt;/code&gt; 标题(Heading)元素呈现了六个不同的级别的标题，&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 级别最高，而 &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; 级别最低。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;元素表示一个包含在 HTML 文档中的独立部分，它没有更具体的语义元素来表示，一般来说会有包含一个标题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。​​&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; 元素呈现了文档的&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;或应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;元素表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HTML 中的全局属性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全局属性是所有 HTML 元素共有的属性; 它们可以用于所有元素，即使属性可能对某些元素不起作用。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;class
一个以空格分隔的元素的类名（classes ）列表，它允许 CSS 和 Javascript 通过类选择器 (class selectors) 或 DOM 方法( document.getElementsByClassName)来选择和访问特定的元素。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;id
定义唯一标识符（ID），该标识符在整个文档中必须是唯一的。 其目的是在链接（使用片段标识符），脚本或样式（使用 CSS）时标识元素。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;contenteditable
一个枚举属性（enumerated attribute），表示元素是否可被用户编辑。 如果可以，浏览器会调整元素的部件（widget）以允许编辑。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hidden
布尔属性表示该元素尚未或不再相关。例如，它可用于隐藏在登录过程完成之前无法使用的页面元素。浏览器不会呈现此类元素。不得使用此属性隐藏可合法显示的内容&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;style
含要应用于元素的 CSS 样式声明。 请注意，建议在单独的文件中定义样式。 该属性和&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;元素主要用于快速样式化，例如用于测试目的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tabindex
整数属性，指示元素是否可以获取输入焦点（可聚焦），是否应该参与顺序键盘导航，如果是，则表示哪个位置。它可能需要几个值：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;负值表示该元素应该是可聚焦的，但不应通过顺序键盘导航到达;&lt;/li&gt;
&lt;li&gt;0 表示元素应通过顺序键盘导航可聚焦和可到达，但其相对顺序由平台约定定义;&lt;/li&gt;
&lt;li&gt;正值意味着元素应该可以通过顺序键盘导航进行聚焦和访问;元素聚焦的顺序是 tabindex 的增加值。如果多个元素共享相同的 tabindex，则它们的相对顺序遵循它们在文档中的相对位置。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;title
包含表示与其所属元素相关信息的文本。 这些信息通常可以作为提示呈现给用户,但不是必须的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;常见的内容标签&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素（或称锚元素）可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;Strong 元素 表示文本十分重要，一般用粗体显示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; HTML 着重元素 标记出需要用户着重阅读的内容， &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;元素呈现一段计算机代码. 默认情况下, 它以浏览器的默认等宽字体显示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 元素表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如空格和换行符）都会显示出来。(紧跟在 &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 开始标签后的换行符也会被省略)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>如何使用Hugo搭建个人博客</title>
      <link>http://localhost:1313/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 10 Apr 2020 09:48:30 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>&lt;ol&gt;
&lt;li&gt;安装 hugo.exe

&lt;ul&gt;
&lt;li&gt;下载 在&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;huge releases 页面&lt;/a&gt; 下载例如 hugo_0.68.3_Windows-64bit.zip 的压缩包，具体版本以自己的系统下载&lt;/li&gt;
&lt;li&gt;安装配置 将下载好的压缩包解压，将 hugo.exe 放到 E:\Software\hugo 目录下，注意目录不要有空格和中文，然后将 E:\Software\hugo\ 添加到 PATH 中，重启终端后，在 Cmder 中运行 hugo version 查看版本&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;快速搭建博客

&lt;ul&gt;
&lt;li&gt;访问&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Hugo&lt;/a&gt;官网，点击 Quick Start 按钮快速开始&lt;/li&gt;
&lt;li&gt;在官方文档依次进行 STep2-Step7 的操作，完成了从站点创建、主题配置、新建博客、开启 Hugo server 等步骤，此时打开&lt;a href=&#34;http://localhost:1313/&#34;&gt;本地页面&lt;/a&gt;就可以看到你的博客预览&lt;/li&gt;
&lt;li&gt;运行 hugo -D ，会创建一个 public 目录，这个目录就是博客站点，可以使用 hugo server 进行网站预览
&lt;img src=&#34;http://localhost:1313/1.png&#34; alt=&#34;操作&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</guid>
      
        <description>

&lt;h1 id=&#34;前端代码规范&#34;&gt;前端代码规范&lt;/h1&gt;

&lt;p&gt;Front Standard Guide&lt;/p&gt;

&lt;h1 id=&#34;前端-js-项目开发规范&#34;&gt;前端 JS 项目开发规范&lt;/h1&gt;

&lt;p&gt;本文来自 B 站：老陈打码。&lt;/p&gt;

&lt;p&gt;规范的目的是为了编写高质量的代码，让你的团队成员每天得心情都是愉悦的，大家在一起是快乐的。&lt;/p&gt;

&lt;p&gt;引自《阿里规约》的开头片段：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;mdash;-现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶。对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;一-编程规约&#34;&gt;一、编程规约&lt;/h1&gt;

&lt;h3 id=&#34;一-命名规范&#34;&gt;(一)命名规范&lt;/h3&gt;

&lt;h4 id=&#34;1-1-1-项目命名&#34;&gt;1.1.1 项目命名&lt;/h4&gt;

&lt;p&gt;全部采用小写方式， 以中划线分隔。&lt;/p&gt;

&lt;p&gt;正例：&lt;code&gt;mall-management-system&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;反例：&lt;code&gt;mall_management-system / mallManagementSystem&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-1-2-目录命名&#34;&gt;1.1.2 目录命名&lt;/h4&gt;

&lt;p&gt;全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数&lt;/p&gt;

&lt;p&gt;正例： &lt;code&gt;scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;反例： &lt;code&gt;script / style / demo_scripts / demoStyles / imgs / docs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名&lt;/p&gt;

&lt;p&gt;正例： &lt;code&gt;head-search / page-loading / authorized / notice-icon&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;反例： &lt;code&gt;HeadSearch / PageLoading&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名
正例： &lt;code&gt;page-one / shopping-car / user-management&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;反例： &lt;code&gt;ShoppingCar / UserManagement&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-1-3-js-css-scss-html-png-文件命名&#34;&gt;1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名&lt;/h4&gt;

&lt;p&gt;全部采用小写方式， 以中划线分隔&lt;/p&gt;

&lt;p&gt;正例： &lt;code&gt;render-dom.js / signup.css / index.html / company-logo.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;反例： &lt;code&gt;renderDom.js / UserManagement.html&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-1-4-命名严谨性&#34;&gt;1.1.4 命名严谨性&lt;/h4&gt;

&lt;p&gt;代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用&lt;/p&gt;

&lt;p&gt;正例：&lt;code&gt;henan / luoyang / rmb 等国际通用的名称，可视同英文。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;反例：&lt;code&gt;DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;杜绝完全不规范的缩写，避免望文不知义：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。&lt;/p&gt;

&lt;h3 id=&#34;二-html-规范-vue-template-同样适用&#34;&gt;(二)HTML 规范 （Vue Template 同样适用）&lt;/h3&gt;

&lt;h4 id=&#34;1-2-1-html-类型&#34;&gt;1.2.1 HTML 类型&lt;/h4&gt;

&lt;p&gt;推荐使用 HTML5 的文档类型申明： .
（建议使用 text/html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 application/xhtml+xml 在浏览器中的应用支持与优化空间都十分有限）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;规定字符编码&lt;/li&gt;
&lt;li&gt;IE 兼容模式&lt;/li&gt;
&lt;li&gt;规定字符编码&lt;/li&gt;
&lt;li&gt;doctype 大写&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=Edge&amp;quot; /&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Page title&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;img src=&amp;quot;images/company-logo.png&amp;quot; alt=&amp;quot;Company&amp;quot; /&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-2-2-缩进&#34;&gt;1.2.2 缩进&lt;/h4&gt;

&lt;p&gt;缩进使用 2 个空格（一个 tab）&lt;/p&gt;

&lt;p&gt;嵌套的节点应该缩进。&lt;/p&gt;

&lt;h4 id=&#34;1-2-3-分块注释&#34;&gt;1.2.3 分块注释&lt;/h4&gt;

&lt;p&gt;在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式&lt;/p&gt;

&lt;!-- 英文 中文 start &gt;

&lt;!-- 英文 中文 end &gt;
正例：

```
&lt;body&gt;
  &lt;!-- header 头部 start --&gt;

&lt;p&gt;&lt;header&gt;
    &lt;div class=&#34;container&#34;&gt;
      &lt;a href=&#34;#&#34;&gt;
        &lt;!-- 图片会把a标签给撑开，所以不用设置a标签的大小 --&gt;
        &lt;img src=&#34;images/header.jpg&#34; /&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- header 头部 end --&gt;
&lt;/body&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### 1.2.4 语义化标签

HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签

正例

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;header&gt;&lt;/header&gt;
&lt;footer&gt;&lt;/footer&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div&gt;
  &lt;p&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.2.5 引号

使用双引号(&amp;quot; &amp;quot;) 而不是单引号(’ &#39;) 。

正例： ``

反例： ``

### (三) CSS 规范

#### 1.3.1 命名

- 类名使用小写字母，以中划线分隔
- id 采用驼峰式命名
- scss 中的变量、函数、混合、placeholder 采用驼峰式命名

ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称

不推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.fw-800 {
  font-weight: 800;
}&lt;/p&gt;

&lt;p&gt;.red {
  color: red;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
推荐:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.heavy {
  font-weight: 800;
}&lt;/p&gt;

&lt;p&gt;.important {
  color: red;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.3.2 选择器

1)css 选择器中避免使用标签名
从结构、表现、行为分离的原则来看，应该尽量避免 css 中出现 HTML 标签，并且在 css 选择器中出现标签名会存在潜在的问题。

2)很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到 DOM 末端的选择器， 你应该总是考虑直接子选择器。

不推荐:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.content .title {
  font-size: 2rem;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
推荐:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.content &amp;gt; .title {
  font-size: 2rem;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.3.3 尽量使用缩写属性

不推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;border-top-style: none;
font-family: palatino, georgia, serif;
font-size: 100%;
line-height: 1.6;
padding-bottom: 2em;
padding-left: 1em;
padding-right: 1em;
padding-top: 0;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;border-top: 0;
font: 100%/1.6 palatino, georgia, serif;
padding: 0 1em 2em;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.3.4 每个选择器及属性独占一行

不推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;button{
  width:100px;height:50px;color:#fff;background:#00a0e9;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;button{
  width:100px;
  height:50px;
  color:#fff;
  background:#00a0e9;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.3.5 省略 0 后面的单位

不推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;div{
  padding-bottom: 0px;
  margin: 0em;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;div{
  padding-bottom: 0;
  margin: 0;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式

不推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#header{
  padding-bottom: 0px;
  margin: 0em;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.header{
  padding-bottom: 0px;
  margin: 0em;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### (四) LESS 规范

#### 1.4.1 代码组织

##### 1)将公共 less 文件放置在 style/less/common 文件夹

例:// color.less,common.less

##### 2)按以下顺序组织

1、@import;
2、变量声明;
3、样式声明;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@import &amp;ldquo;mixins/size.less&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;@default-text-color: #333;&lt;/p&gt;

&lt;p&gt;.page {
  width: 960px;
  margin: 0 auto;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.4.2 避免嵌套层级过多

将嵌套深度限制在 3 级。对于超过 4 级的嵌套，给予重新评估。这可以避免出现过于详实的 CSS 选择器。
避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于 20 行的嵌套规则出现

不推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.main{
  .title{
    .name{
       color:#fff
    }
  }
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
推荐：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.main-title{
   .name{
      color:#fff
   }
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### (五) Javascript 规范

#### 1.5.1 命名

##### 1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束

反例： `_name / name_ / name$`

##### 2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。

正例： `localValue / getHttpMessage() / inputUserId`

\***\*其中 method 方法命名必须是 动词 或者 动词+名词 形式\*\***

正例：`saveShopCarData /openShopCarInfoDialog`

反例：`save / open / show / go`

\***\*特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）\*\***

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;add / update / delete / detail / get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
**附： 函数方法常用的动词:**

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;get 获取/set 设置,
add 增加/remove 删除
create 创建/destory 移除
start 启动/stop 停止
open 打开/close 关闭,
read 读取/write 写入
load 载入/save 保存,
create 创建/destroy 销毁
begin 开始/end 结束,
backup 备份/restore 恢复
import 导入/export 导出,
split 分割/merge 合并
inject 注入/extract 提取,
attach 附着/detach 脱离
bind 绑定/separate 分离,
view 查看/browse 浏览
edit 编辑/modify 修改,
select 选取/mark 标记
copy 复制/paste 粘贴,
undo 撤销/redo 重做
insert 插入/delete 移除,
add 加入/append 添加
clean 清理/clear 清除,
index 索引/sort 排序
find 查找/search 搜索,
increase 增加/decrease 减少
play 播放/pause 暂停,
launch 启动/run 运行
compile 编译/execute 执行,
debug 调试/trace 跟踪
observe 观察/listen 监听,
build 构建/publish 发布
input 输入/output 输出,
encode 编码/decode 解码
encrypt 加密/decrypt 解密,
compress 压缩/decompress 解压缩
pack 打包/unpack 解包,
parse 解析/emit 生成
connect 连接/disconnect 断开,
send 发送/receive 接收
download 下载/upload 上传,
refresh 刷新/synchronize 同步
update 更新/revert 复原,
lock 锁定/unlock 解锁
check out 签出/check in 签入,
submit 提交/commit 交付
push 推/pull 拉,
expand 展开/collapse 折叠
begin 起始/end 结束,
start 开始/finish 完成
enter 进入/exit 退出,
abort 放弃/quit 离开
obsolete 废弃/depreciate 废旧,
collect 收集/aggregate 聚集&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。

正例： `MAX_STOCK_COUNT`

反例： `MAX_COUNT`

#### 1.5.2 代码格式

##### 1) 使用 2 个空格进行缩进

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if (x &amp;lt; y) {
  x += 10;
} else {
  x += 1;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。

&amp;gt; 说明：任何情形，没有必要插入多个空行进行隔开。

#### 1.5.3 字符串

统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处：

正例:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let str = &amp;lsquo;foo&amp;rsquo;;
let testDiv = &amp;lsquo;&lt;div id=&#34;test&#34;&gt;&lt;/div&gt;&amp;rsquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let str = &amp;lsquo;foo&amp;rsquo;;
let testDiv = &amp;ldquo;&lt;div id=&#39;test&#39;&gt;&lt;/div&gt;&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.5.4 对象声明

##### 1)使用字面值创建对象

正例： `let user = {};`

反例： `let user = new Object();`

##### 2) 使用字面量来代替对象构造器

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var user = {
  age: 0,
  name: 1,
  city: 3
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var user = new Object();
user.age = 0;
user.name = 0;
user.city = 0;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.5.5 使用 ES6,7

必须优先使用 ES6,7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。

&amp;gt; 必须强制使用 ES6, ES7 的新语法，比如箭头函数、await/async ， 解构， let ， for…of 等等

#### 1.5.6 括号

下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if (condition) {
  doSomething();
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if (condition) doSomething();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.5.7 undefined 判断

永远不要直接使用 undefined 进行变量判断；使用 typeof 和字符串’undefined’对变量进行判断。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if (typeof person === &amp;lsquo;undefined&amp;rsquo;) {
    &amp;hellip;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if (person === undefined) {
    &amp;hellip;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 1.5.8 条件判断和循环最多三层

条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。

#### 1.5.9 this 的转换命名

对上下文 this 的引用只能使用’self’来命名

#### 1.5.10 慎用 console.log

因 console.log 大量使用会有性能问题，所以在非 webpack 项目中谨慎使用 log 功能

# 二、Vue 项目规范

### (一) Vue 编码基础

vue 项目规范以 Vue 官方规范 （https://cn.vuejs.org/v2/style-guide/） 中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。

&amp;gt; 请仔仔细细阅读 Vue 官方规范，切记，此为第一步。

#### 2.1.1. 组件规范

##### 1) 组件名为多个单词。

组件名应该始终是多个单词组成（大于等于 2），且命名规范为`KebabCase`格式。
这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;export default {
  name: &amp;lsquo;TodoItem&amp;rsquo;
  // &amp;hellip;
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;export default {
  name: &amp;lsquo;Todo&amp;rsquo;,
  // &amp;hellip;
}
export default {
  name: &amp;lsquo;todo-item&amp;rsquo;,
  // &amp;hellip;
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 2) 组件文件名为 pascal-case 格式

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;components/
|- my-component.vue&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;components/
|- myComponent.vue
|- MyComponent.vue&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;components/
|- base-button.vue
|- base-table.vue
|- base-icon.vue&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;components/
|- MyButton.vue
|- VueTable.vue
|- Icon.vue&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;components/
|- todo-list.vue
|- todo-list-item.vue
|- todo-list-item-button.vue
|- user-profile-options.vue （完整单词）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;components/
|- TodoList.vue
|- TodoItem.vue
|- TodoButton.vue
|- UProfOpts.vue （使用了缩写）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;

&lt;p&gt;&lt;MyComponent /&gt;
&lt;Row&gt;&lt;table :column=&#34;data&#34;/&gt;&lt;/Row&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;my-component /&gt; &lt;row&gt;&lt;table :column=&#34;data&#34;/&gt;&lt;/row&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 6) 组件的 data 必须是一个函数

当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 因为如果直接是一个对象的话，子组件之间的属性值会互相影响。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;export default {
  data () {
    return {
      name: &amp;lsquo;jack&amp;rsquo;
    }
  }
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;export default {
  data: {
    name: &amp;lsquo;jack&amp;rsquo;
  }
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 7) Prop 定义应该尽量详细

- 必须使用 camelCase 驼峰命名
- 必须指定类型
- 必须加上注释，表明其含义
- 必须加上 required 或者 default，两者二选其一
- 如果有业务需要，必须加上 validator 验证

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;props: {
  // 组件状态，用于控制组件的颜色
   status: {
     type: String,
     required: true,
     validator: function (value) {
       return [
         &amp;lsquo;succ&amp;rsquo;,
         &amp;lsquo;info&amp;rsquo;,
         &amp;lsquo;error&amp;rsquo;
       ].indexOf(value) !== -1
     }
   },
    // 用户级别，用于显示皇冠个数
   userLevel：{
      type: String,
      required: true
   }
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 8) 为组件样式设置作用域

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;template&gt;
  &lt;button class=&#34;btn btn-close&#34;&gt;X&lt;/button&gt;
&lt;/template&gt;&lt;/p&gt;

&lt;!-- 使用 `scoped` 特性 --&gt;

&lt;p&gt;&lt;style scoped&gt;
  .btn-close {
    background-color: red;
  }
&lt;/style&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;template&gt;
  &lt;button class=&#34;btn btn-close&#34;&gt;X&lt;/button&gt;
&lt;/template&gt;
&lt;!-- 没有使用 `scoped` 特性 --&gt;
&lt;style&gt;
  .btn-close {
    background-color: red;
  }
&lt;/style&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 9) 如果特性元素较多，应该主动换行。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;MyComponent foo=&#34;a&#34; bar=&#34;b&#34; baz=&#34;c&#34;
    foo=&#34;a&#34; bar=&#34;b&#34; baz=&#34;c&#34;
    foo=&#34;a&#34; bar=&#34;b&#34; baz=&#34;c&#34;
 /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;MyComponent foo=&#34;a&#34; bar=&#34;b&#34; baz=&#34;c&#34; foo=&#34;a&#34; bar=&#34;b&#34; baz=&#34;c&#34; foo=&#34;a&#34; bar=&#34;b&#34; baz=&#34;c&#34; foo=&#34;a&#34; bar=&#34;b&#34; baz=&#34;c&#34;/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 2.1.2. 模板中使用简单的表达式

组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;template&gt;
  &lt;p&gt;{{ normalizedFullName }}&lt;/p&gt;
&lt;/template&gt;&lt;/p&gt;

&lt;p&gt;// 复杂表达式已经移入一个计算属性
computed: {
  normalizedFullName: function () {
    return this.fullName.split(&amp;rsquo; &amp;lsquo;).map(function (word) {
      return word[0].toUpperCase() + word.slice(1)
    }).join(&amp;rsquo; &amp;lsquo;)
  }
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;template&gt;
  &lt;p&gt;
       {{
          fullName.split(&amp;rsquo; &amp;lsquo;).map(function (word) {
             return word[0].toUpperCase() + word.slice(1)
           }).join(&amp;rsquo; &amp;lsquo;)
        }}
  &lt;/p&gt;
&lt;/template&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 2.1.3 指令都使用缩写形式

指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:)

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input
  @input=&#34;onInput&#34;
  @focus=&#34;onFocus&#34;
&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input
  v-on:input=&#34;onInput&#34;
  @focus=&#34;onFocus&#34;
&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 2.1.4 标签顺序保持一致

单文件组件应该总是让标签顺序保持为 `

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;template&gt;&amp;hellip;&lt;/template&gt;
&lt;script&gt;&amp;hellip;&lt;/script&gt;
&lt;style&gt;&amp;hellip;&lt;/style&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
反例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;template&gt;&amp;hellip;&lt;/template&gt;
&lt;style&gt;&amp;hellip;&lt;/style&gt;
&lt;script&gt;&amp;hellip;&lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### 2.1.5 必须为 v-for 设置键值 key

#### 2.1.6 v-show 与 v-if 选择

如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。

#### 2.1.7 script 标签内部结构顺序

components &amp;gt; props &amp;gt; data &amp;gt; computed &amp;gt; watch &amp;gt; filter &amp;gt; 钩子函数（钩子函数按其执行顺序） &amp;gt; methods

#### 2.1.8 Vue Router 规范

##### 1) 页面跳转数据传递使用路由参数

页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。

正例：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let id = &amp;lsquo; 123&amp;rsquo;;
this.$router.push({ name: &amp;lsquo;userCenter&amp;rsquo;, query: { id: id } });&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 2) 使用路由懒加载（延迟加载）机制

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{
    path: &#39;/uploadAttachment&#39;,
    name: &#39;uploadAttachment&#39;,
    meta: {
      title: &#39;上传附件&#39;
    },
    component: () =&amp;gt; import(&#39;@/view/components/uploadAttachment/index.vue&#39;)
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
##### 3) router 中的命名规范

path、childrenPoints 命名规范采用`kebab-case`命名规范（尽量 vue 文件的目录结构保持一致，因为目录、文件名都是`kebab-case`，这样很方便找到对应的文件）

name 命名规范采用`KebabCase`命名规范且和 component 组件名保持一致！（因为要保持 keep-alive 特性，keep-alive 按照 component 的 name 进行缓存，所以两者必须高度保持一致）

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;// 动态加载
export const reload = [
  {
    path: &amp;lsquo;/reload&amp;rsquo;,
    name: &amp;lsquo;reload&amp;rsquo;,
    component: Main,
    meta: {
      title: &amp;lsquo;动态加载&amp;rsquo;,
      icon: &amp;lsquo;icon iconfont&amp;rsquo;
    },&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;children: [
  {
    path: &#39;/reload/smart-reload-list&#39;,
    name: &#39;SmartReloadList&#39;,
    meta: {
      title: &#39;SmartReload&#39;,
      childrenPoints: [
        {
          title: &#39;查询&#39;,
          name: &#39;smart-reload-search&#39;
        },
        {
          title: &#39;执行reload&#39;,
          name: &#39;smart-reload-update&#39;
        },
        {
          title: &#39;查看执行结果&#39;,
          name: &#39;smart-reload-result&#39;
        }
      ]
    },
    component: () =&amp;gt;
      import(&#39;@/views/reload/smart-reload/smart-reload-list.vue&#39;)
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 4) router 中的 path 命名规范

path 除了采用`kebab-case`命名规范以外，必须以 / 开头，即使是 children 里的 path 也要以 / 开头。如下示例

-

目的：

经常有这样的场景：某个页面有问题，要立刻找到这个 vue 文件，如果不用以/开头，path 为 parent 和 children 组成的，可能经常需要在 router 文件里搜索多次才能找到，而如果以/开头，则能立刻搜索到对应的组件 \*

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{
    path: &amp;lsquo;/file&amp;rsquo;,
    name: &amp;lsquo;File&amp;rsquo;,
    component: Main,
    meta: {
      title: &amp;lsquo;文件服务&amp;rsquo;,
      icon: &amp;lsquo;ios-cloud-upload&amp;rsquo;
    },
    children: [
      {
        path: &amp;lsquo;/file/file-list&amp;rsquo;,
        name: &amp;lsquo;FileList&amp;rsquo;,
        component: () =&amp;gt; import(&amp;lsquo;@/views/file/file-list.vue&amp;rsquo;)
      },
      {
        path: &amp;lsquo;/file/file-add&amp;rsquo;,
        name: &amp;lsquo;FileAdd&amp;rsquo;,
        component: () =&amp;gt; import(&amp;lsquo;@/views/file/file-add.vue&amp;rsquo;)
      },
      {
        path: &amp;lsquo;/file/file-update&amp;rsquo;,
        name: &amp;lsquo;FileUpdate&amp;rsquo;,
        component: () =&amp;gt; import(&amp;lsquo;@/views/file/file-update.vue&amp;rsquo;)
      }
    ]
  }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### (二) Vue 项目目录规范

#### 2.2.1 基础

vue 项目中的所有命名一定要与后端命名统一。

比如权限：后端 privilege, 前端无论 router , store, api 等都必须使用 privielege 单词！

#### 2.2.2 使用 Vue-cli 脚手架

使用 vue-cli3 来初始化项目，项目名按照上面的命名规范。

#### 2.2.3 目录说明

目录名按照上面的命名规范，其中 components 组件用大写驼峰，其余除 components 组件目录外的所有目录均使用 kebab-case 命名。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;src                               源码目录
|&amp;ndash; api                              所有api接口
|&amp;ndash; assets                           静态资源，images, icons, styles等
|&amp;ndash; components                       公用组件
|&amp;ndash; config                           配置信息
|&amp;ndash; constants                        常量信息，项目所有Enum, 全局常量等
|&amp;ndash; directives                       自定义指令
|&amp;ndash; filters                          过滤器，全局工具
|&amp;ndash; datas                            模拟数据，临时存放
|&amp;ndash; lib                              外部引用的插件存放及修改文件
|&amp;ndash; mock                             模拟接口，临时存放
|&amp;ndash; plugins                          插件，全局使用
|&amp;ndash; router                           路由，统一管理
|&amp;ndash; store                            vuex, 统一管理
|&amp;ndash; themes                           自定义样式主题
|&amp;ndash; views                            视图目录
|   |&amp;ndash; role                             role模块名
|   |&amp;ndash; |&amp;ndash; role-list.vue                    role列表页面
|   |&amp;ndash; |&amp;ndash; role-add.vue                     role新建页面
|   |&amp;ndash; |&amp;ndash; role-update.vue                  role更新页面
|   |&amp;ndash; |&amp;ndash; index.less                      role模块样式
|   |&amp;ndash; |&amp;ndash; components                      role模块通用组件文件夹
|   |&amp;ndash; employee                         employee模块&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 1) api 目录

- 文件、变量命名要与后端保持一致。
- 此目录对应后端 API 接口，按照后端一个 controller 一个 api js 文件。若项目较大时，可以按照业务划分子目录，并与后端保持一致。
- api 中的方法名字要与后端 api url 尽量保持语义高度一致性。
- 对于 api 中的每个方法要添加注释，注释与后端 swagger 文档保持一致。

正例：

后端 url： EmployeeController.java

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/employee/add
/employee/delete/{id}
/employee/update&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
前端： employee.js

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;// 添加员工
  addEmployee: (data) =&amp;gt; {
    return postAxios(&amp;lsquo;/employee/add&amp;rsquo;, data)
  },
  // 更新员工信息
  updateEmployee: (data) =&amp;gt; {
    return postAxios(&amp;lsquo;/employee/update&amp;rsquo;, data)
  },
    // 删除员工
  deleteEmployee: (employeeId) =&amp;gt; {
    return postAxios(&amp;lsquo;/employee/delete/&amp;rsquo; + employeeId)
   },&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 2) assets 目录

assets 为静态资源，里面存放 images, styles, icons 等静态资源，静态资源命名格式为 kebab-case

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|assets
|&amp;ndash; icons
|&amp;ndash; images
|   |&amp;ndash; background-color.png
|   |&amp;ndash; upload-header.png
|&amp;ndash; styles&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 3) components 目录

此目录应按照组件进行目录划分，目录命名为 KebabCase，组件命名规则也为 KebabCase

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|components
|&amp;ndash; error-log
|   |&amp;ndash; index.vue
|   |&amp;ndash; index.less
|&amp;ndash; markdown-editor
|   |&amp;ndash; index.vue
|   |&amp;ndash; index.js
|&amp;ndash; kebab-case&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 4) constants 目录

此目录存放项目所有常量，如果常量在 vue 中使用，请使用 vue-enum 插件(https://www.npmjs.com/package/vue-enum)

目录结构：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|constants
|&amp;ndash; index.js
|&amp;ndash; role.js
|&amp;ndash; employee.js&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
例子： employee.js

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;export const EMPLOYEE_STATUS = {
  NORMAL: {
    value: 1,
    desc: &amp;lsquo;正常&amp;rsquo;
  },
  DISABLED: {
    value: 1,
    desc: &amp;lsquo;禁用&amp;rsquo;
  },
  DELETED: {
    value: 2,
    desc: &amp;lsquo;已删除&amp;rsquo;
  }
};&lt;/p&gt;

&lt;p&gt;export const EMPLOYEE_ACCOUNT_TYPE = {
  QQ: {
    value: 1,
    desc: &amp;lsquo;QQ登录&amp;rsquo;
  },
  WECHAT: {
    value: 2,
    desc: &amp;lsquo;微信登录&amp;rsquo;
  },
  DINGDING: {
    value: 3,
    desc: &amp;lsquo;钉钉登录&amp;rsquo;
  },
  USERNAME: {
    value: 4,
    desc: &amp;lsquo;用户名密码登录&amp;rsquo;
  }
};&lt;/p&gt;

&lt;p&gt;export default {
  EMPLOYEE_STATUS,
  EMPLOYEE_ACCOUNT_TYPE
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##### 5) router 与 store 目录

这两个目录一定要将业务进行拆分，不能放到一个 js 文件里。

router 尽量按照 views 中的结构保持一致

store 按照业务进行拆分不同的 js 文件

##### 6) views 目录

- 命名要与后端、router、api 等保持一致
- components 中组件要使用 PascalCase 规则

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|&amp;ndash; views                            视图目录
|   |&amp;ndash; role                             role模块名
|   |   |&amp;ndash; role-list.vue                    role列表页面
|   |   |&amp;ndash; role-add.vue                     role新建页面
|   |   |&amp;ndash; role-update.vue                  role更新页面
|   |   |&amp;ndash; index.less                      role模块样式
|   |   |&amp;ndash; components                      role模块通用组件文件夹
|   |   |   |&amp;ndash; role-header.vue                        role头部组件
|   |   |   |&amp;ndash; role-modal.vue                         role弹出框组件
|   |&amp;ndash; employee                         employee模块
|   |&amp;ndash; behavior-log                      行为日志log模块
|   |&amp;ndash; code-generator                    代码生成器模块
```&lt;/p&gt;

&lt;h4 id=&#34;2-2-4-注释说明&#34;&gt;2.2.4 注释说明&lt;/h4&gt;

&lt;p&gt;整理必须加注释的地方&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;公共组件使用说明&lt;/li&gt;
&lt;li&gt;api 目录的接口 js 文件必须加注释&lt;/li&gt;
&lt;li&gt;store 中的 state, mutation, action 等必须加注释&lt;/li&gt;
&lt;li&gt;vue 文件中的 template 必须加注释，若文件较大添加 start end 注释&lt;/li&gt;
&lt;li&gt;vue 文件的 methods，每个 method 必须添加注释&lt;/li&gt;
&lt;li&gt;vue 文件的 data, 非常见单词要加注释&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-2-5-其他&#34;&gt;2.2.5 其他&lt;/h4&gt;

&lt;h5 id=&#34;1-尽量不要手动操作-dom&#34;&gt;1) 尽量不要手动操作 DOM&lt;/h5&gt;

&lt;p&gt;因使用 vue 框架，所以在项目开发中尽量使用 vue 的数据驱动更新 DOM，尽量（不到万不得已）不要手动操作 DOM，包括：增删改 dom 元素、以及更改样式、添加事件等。&lt;/p&gt;

&lt;h5 id=&#34;2-删除无用代码&#34;&gt;2) 删除无用代码&lt;/h5&gt;

&lt;p&gt;因使用了 git/svn 等代码版本工具，对于无用代码必须及时删除，例如：一些调试的 console 语句、无用的弃用功能代码。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/posts/ms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/ms/</guid>
      
        <description>

&lt;h2 id=&#34;面试&#34;&gt;面试&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;文件上传
大部分同学都做过 没有两点&lt;/li&gt;
&lt;li&gt;输入url到vue渲染页面发生了啥&lt;/li&gt;
&lt;li&gt;表格渲染
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1、菜鸟
 1.axios.post + 上传进度条 + 后端node接手文件
2、10k
    拖拽 粘贴
3、15k
    分片断点续传
4、20k
    1.如何限制只能上传png格式
      1. .sqlit() 基本不得分
      2. 文件头信息
    2.如何判断文件唯一性
        1.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
